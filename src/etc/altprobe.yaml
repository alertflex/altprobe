%YAML 1.1
---
# Altprobe collector configuration file.

# Collector version 0.9
collector:
  node: "_node_id"
  host: "_host_id"
  
  # Time difference between collector and controller's (hours)
  time_delta: 0
  
  # Alerts threshold in case of alerts overloading in Redis, if the threshold is exceeded, 
  # the collector omits next alerts until Redis list is not empty
  # also special alert about multiple alerts will appear (redirection of alerts to logs will not interrupted)
  alerts_threshold: 100
  # Save events/logs to local path - /var/log/altprobe, if connection to controller isn't available
  log_path: "/var/log/altprobe/"
  # max size (MB) of the log file, if size more than this value, collector switches to the next log file
  log_size: 100
  
  # delay on collector start in sec (default 30)
  timer_start: 30  
  # sleep delay in milisecond (default 1000)
  timer_sleep:   1000  
  # period reports generation for collector statistic in sec, should be not more than 15 min
  # if 0 then the functionality is off (default 300 - 5 min)
  timer_report: 300  
  # timer to backup/update of IDS configs and rules to controller, check status agents and containers
  # measure in timer_update*timer_report (default 12 - 60 min)
  timer_update: 12
  
  # Allow remote management of collector from controller
  remote_control: "false"
  # Allow update of configs, filters, rules between collector and controller
  remote_update: "true"
  
  # path to MaxMind Geo DB
  geo_db: "/etc/altprobe/GeoLiteCity.dat"
  
  # Docker unix socket filename for active response - /var/run/docker.sock , if value is indef interface to socket disabled
  socket_docker: "indef"
  # Suricata unix socket filename for active response - /run/suricata/suricata-command.socket , if value is indef interface to socket disabled
  socket_suricata: "indef"
  
  # Altprobe can read an agents status via Wazuh API  (report_timer is used as a period of reading)
  wazuhapi_host: "127.0.0.1"
  wazuhapi_port: 55000  
  wazuhapi_user: "_wazuh_user"
  wazuhapi_pwd: "_wazuh_pwd"
    
  # Altprobe can read of sources events from Redis list by pop API call
  redis_host: "127.0.0.1"
  redis_port: 6379 
  
controller:
  # ActiveMQ interface for communication with Cnode
  url: "_amq_url"
  user: "_amq_user"
  pwd: "_amq_pwd"
  cert: "_amq_cert"
  cert_verify: "_cert_verify"
  key: "_amq_key"
  key_pwd: "_key_pwd"
  
scanners:
  project_id: "indef"
  # Path to Dependency-check scan result file, for example /root/reports/dependency-check-report.json
  dependencycheck_result: "indef"
  # Path to Docker-bench scan result file, for example /root/docker-bench-security/result.json
  dockerbench_result: "indef" 
  # Path to Kube-bench result file, for example /etc/altprobe/kubebench-report.json
  kubebench_result: "indef"
  # Path to Kube-hunter result file, for example /root/reports/kube-hunter.json
  kubehunter_result: "indef"
  # Path to Nmap result file, for example /root/reports/nmap.xml
  nmap_result: "indef"
  # Path to Snyk result file, for example /root/reports/snyk.json
  snyk_result: "indef"
  # Path to Trivy result file, for example /root/reports/trivy.json
  trivy_result: "indef"
  # Path to OWASP ZAP result file, for example /root/reports/zap.json
  zap_result: "indef"
    
sensors:
  # Altprobe can read events of falco, suricata, wazuh, modsecurity directly from log files.
  # If xxx_log is "indef" redis interface will be used. In case xxx_redis is "indef", module is not in use
  falco_log: "_falco_log"
  falco_redis: "altprobe_crs" 
  falco_rules: "/etc/falco/rules.d/"
  falco_local: "/etc/falco/rules.available/"
  
  modsec_log: "_modsec_log"
  modsec_redis: "altprobe_waf" 
  modsec_rules: "/usr/local/owasp-modsecurity-crs-3.0.2/"
  modsec_local: "/etc/nginx/modsec/rules/"
  
  suri_log: "_suri_log"
  suri_redis: "altprobe_nids" 
  suri_rules: "/var/lib/suricata/rules/"
  suri_local: "/etc/suricata/rules/"
  
  wazuh_log: "_wazuh_log"
  wazuh_redis: "altprobe_hids" 
  wazuh_rules: "/var/ossec/ruleset/"
  wazuh_local: "/var/ossec/etc/"
  
  # For reading events from altprobe's custom sources only Redis interface can be used. 
  # in case value "indef", module is not in use
  misc_redis: "altprobe_misc"

  # For reading events from AWS WAF
  awswaf_redis: "altprobe_awswaf"
