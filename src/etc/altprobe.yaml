%YAML 1.1
---
# Altprobe collector configuration file.
# version 1.0.2
collector:
  # The node is a virtual endpoint that allows implement the same policies for all collectors in certain network/security segment. 
  node: "_node_name"
  # name of host (see /etc/hosts or dns name of compute) where Alertflex collector is installed
  host: "_host_name"
  
  # Time difference between collector and controller's nodes (in hours)
  time_delta: 0
  
  # Alerts threshold (in case of alerts overloading in Redis).
  # If the threshold is exceeded, the collector omits next alerts until Redis list is not empty,
  # also special alert about multiple security events will be arised 
  alerts_threshold: 100
  # Keep events/logs in local folder - /var/log/altprobe, if connection to controller is lost
  log_path: "/var/log/altprobe/"
  # max size (MB) of local log file, if size more, collector rotates to the next log file
  log_size: 100
  
  # Delay on start in sec (default 30)
  timer_start: 30  
  # Sleep delay in milisecond (default 1000)
  timer_sleep:   1000  
  # Time interval (in sec) for generation of collector stat reports, max value - 15 min
  # if value 0 than the functionality is off (default value 300 - 5 min)
  timer_report: 300  
  # Time interval to transfer of sensors configs and rules into controller, also to check status of agents and containers
  # it is calculated by next fomula: timer_update*timer_report  (default value 12 - 60 min)
  timer_update: 12
  
  # Path to MaxMind Geo DB
  geo_db: "/etc/altprobe/GeoLiteCity.dat"
  
  # Allow remote management of collector from controller
  remote_control: "true"
  
  # Allow kubernetes management and set monitoring for defined namespace
  k8s_namespace: "indef"
  
  # Docker unix socket filename for active response - /var/run/docker.sock , if value is indef interface to socket disabled
  socket_docker: "indef"
  # Suricata unix socket filename for active response - /run/suricata/suricata-command.socket , if value is indef interface to socket disabled
  socket_suricata: "indef"
  
  # Altprobe can read an agents status via Wazuh API  (report_timer is used as a period of reading)
  wazuhapi_host: "127.0.0.1"
  wazuhapi_port: 55000  
  wazuhapi_user: "_wazuh_user"
  wazuhapi_pwd: "_wazuh_pwd"
    
  # Altprobe can read security events from Redis list by pop API call
  redis_host: "127.0.0.1"
  redis_port: 6379 
  
controller:
  # ActiveMQ interface for communication with Cnode
  url: "_amq_url"
  user: "_amq_user"
  pwd: "_amq_pwd"
  cert: "_amq_cert"
  cert_verify: "_cert_verify"
  key: "_amq_key"
  key_pwd: "_key_pwd"
  
scanners:
  # Support the second project id (only for posture management service)
  project_id: "indef"
  # Path to Dependency-check scan result file, for example /root/reports/dependency-check-report.json
  dependencycheck_result: "indef"
  # Path to Docker-bench scan result file, for example /root/docker-bench-security/result.json
  dockerbench_result: "indef" 
  # Path to Kube-bench result file, for example /etc/altprobe/kubebench-report.json
  kubebench_result: "indef"
  # Path to Kube-hunter result file, for example /root/reports/kube-hunter.json
  kubehunter_result: "indef"
  # Path to Nmap result file
  nmap_result: "/root/reports/nmap.xml"
  # Path to Tfsec result file
  tfsec_result: "/root/reports/tfsec.json"
  # Path to Trivy result file
  trivy_result: "/root/reports/trivy.json"
  # Path to OWASP ZAP result file
  zap_result: "/root/reports/zap.json"

sensors:
  # Altprobe can read sensors (falco, suricata, wazuh, modsecurity) events directly from log files.
  # If xxx_log is "indef", redis interface will be used. In case xxx_redis is "indef", module is disabled
  falco_log: "_falco_log"
  falco_redis: "altprobe_crs" 
  falco_rules: "/etc/falco/rules.d/"
  falco_local: "/etc/falco/rules.available/"
  
  modsec_log: "_modsec_log"
  modsec_redis: "altprobe_waf" 
  modsec_rules: "/usr/local/owasp-modsecurity-crs-3.0.2/"
  modsec_local: "/etc/nginx/modsec/rules/"
  
  suri_log: "_suri_log"
  suri_redis: "altprobe_nids" 
  suri_rules: "/var/lib/suricata/rules/"
  suri_local: "/etc/suricata/rules/"
  
  wazuh_log: "_wazuh_log"
  wazuh_redis: "altprobe_hids" 
  wazuh_rules: "/var/ossec/ruleset/"
  wazuh_local: "/var/ossec/etc/"
  
  # For reading events from AWS WAF (only through Redis)
  # in case value "indef", module is disabled
  awswaf_redis: "altprobe_awswaf"
  
  # For reading events from altprobe's custom sources (only through Redis)
  # in case value "indef", module is disabled
  misc_redis: "altprobe_misc"
  